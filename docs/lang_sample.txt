OBSOLETE!

package mypkg
import math
# imported procs are either accesible via full name: math.abs, or via dot-notation on variable/literal: (-1).abs

# integer type is signed 32-bit by default, signed 64-bit otherwise
const a = 0x33
const b: byte = 255
public const c = "a string"
var d = a + b
const e = c + " another string"

alias sqrt = math.sqrt

alias i32 = int

type Id = long

# all 'proc' arguments are read-only except for 'var'.
# dot-notation dispatches on exact type match by the first argument.
# There can not be 'var' and non-var procs with same name. 

proc abs(i: int): int
    return i < 0 ? -i : i
end

# Error!
proc abs(i: var int): int
end

# ok
proc abs_var(i: var int): int
end

proc abs(i: long): long
    return i < 0 ? -i : i
end

# multiple return values
proc mod_div(a, b: int): (d, rem: int)
    # either
    d = a / b
    rem = a % b
    # or
    return (a/b, a%b)
end

proc test_mod_div()
    var d, r:int
    (d,r) = mod_div(3,2)
end

# generic, works only with reference types (objects/interfaces)
proc<Obj> weak(o: Obj?): weak<Obj>
    return o
end

# lambdas
proc m()
    var b = 3
    var obj = Object.new()

    # type of a is 'closure(a: int)', captured environment in brackets []:
    var a = closure[obj = weak(obj), b](a: int)
        retain(obj)
            obj.do_smth(b)
        on_null
            # null
        end_retain
    end
end

# generic closures
# accepts only procs with argument objects which implement both 'Equals' and 'Hash' interfaces:
type Comparator = closure<O implements(Equals, Hash)>(a, b: O)
# accepts any object type as argument
type OnClick = closure<O>(origin: O)


# enums, string, integer mappings, attributes
type StrAnn = struct
    var str, alt1, alt2: string
end_struct

type DayOfWeek = enum<int>
    @StrAnn{str = literal(Monday), alt1 = "mon", alt2 = "monday"}
    Monday = 1,
    Tuesday,
    Wednesday = 3
end_enum

# enum declaration generates procs 'as_string', 'from_string':
proc as_string(e: DayOfWeek): string
    switch(e)
    case(Monday) return "Monday"
    # ...
    end_switch
end

proc from_string(v: var DayOfWeek, s: String): bool
    switch(s)
    case("Monday") v = DayOfWeek.Monday
    # ...
    else
        #  error!
        return false
    end_switch
    return true
end

const MondayInt = as_int(DayOfWeek.Monday)
# magic proc is generated, depending on the type name (u8, int, uint)
proc from_int(e: var DayOfWeek, i: int): bool
proc from_uint(e: var DayOfWeek, i: uint): bool
proc as_int(e: DayOfWeek): int
proc as_uint(e: DayOfWeek): uint

const MondayAlt2 = DayOfWeek.Monday.@StrAnn.alt1


# bitsets
# second argument ('u8') is optional
type WorkingDaysMask = bitset<DayOfWeek, u8>
const working_days = WorkingDaysMask(Monday, Wednesday)

# magic proc is generated, depending on the type name (u8, int, uint)
proc from_u8(b: var WorkingDaysMask, v: u8): bool
proc as_u8(b: WorkingDaysMask): u8



# ARRAYS
# predefined enum of types for working with arrays
type ArrayElementTypeId = enum
    unknown,
    # any object, including a string
    nullable,
    # any object, can be string
    object_inst,
    array_inst,
    # the following items use ArrayElementValueTypeSize
    integer,
    enum,
    bitset,
end_enum

# size for integers, enums, bitsets
type ArrayElementValueTypeSizeId = enum
    i8
    i16,
    i32,
    i64,
    u8,
    u16,
    u32,
    u64,
end_enum


# Arrays copied on assignment, always have length, basic type info accessible
# dynamic array, uses heap
var arr: array<int>

# array with empty <> means a generic array, which can only be operated on using several procs.

# standard library methods
# returns elements count
proc length(arr: array<>): int
proc type_id(arr: array<>): ArrayElementTypeId
proc size_id(arr: array<>): ArrayElementValueTypeSizeId
proc element_class(arr: array<>): Class?

proc element_as_int(arr: array<>, index: int): i64
proc update_element_as_int(arr: array<>, index: int, value: i64)
proc element_as_uint(arr: array<>, index: uint): u64
proc update_element_as_uint(arr: array<>, index: int, value: u64)
proc element_as_object(arr: array<>, index: uint): Object?
proc update_element_as_object(arr: array<>, index: int, value: Object?)
proc element_as_array(arr: array<>, index: uint): array<>
proc update_element_as_array(arr: array<>, index: int, value: array<>)

# initializes with zeroes or nulls, or same empty object instance.
proc resize(arr: var array<>, sz: int)
# Casts to ToFromString interface, if fails then writes pointer hex value.
# Numbers must be localization neutral, as literals.
proc as_string(arr: array<>): string
proc from_string(arr: var array<>, s: string): bool


# static array, does not use heap, storage inplace
const arr2 = [1,2,3]
var arr3: array<int, 3>

# union type? can be implemented via properties

# variant type? can be implemented via interfaces

# 'struct' is a value type, directly mappable to C struct.
# Compiler generates default constructor to set field values, then calls _init if it is defined.
# Compiler generates default destructor to clear referenced objects, _finalize is called before calling generated destructor.
# Either a) default constructor then _copy is called on assignment if defined, b) fields copied by assignment.
type St = struct
    var c: int
    property y:int, set(c), get(c)
end_struct

# optional copy constructor
proc _copy(dest: var St, src: var St)
    dest.c = src.c
end

# optional default constructor for St
proc _init(s: var St)

end

# optional destructor for struct
proc _finalize(s: var St)
    s.c = 0xFEADFEAD
end


# 'object' is a referenced type with RTTI, interfaces etc.
# Compiler generates default constructor to set field values, then calls _init if it is defined.
# Compiler generates default destructor to clear referenced objects, _finalize is called before calling generated destructor.
type Obj = object
    var f: u32 = 3
    property flags:u32, set(f), get(f)
end_object

# optional default constructor for Obj
proc _init(o: Obj)

end

# optional destructor for object
proc _finalize(o: Obj)
    o.f = 0xFFFFFFFF
end


# Class is a reference type which is not Object instance, passed as raw pointer, lives in the static data,
# provides access to attributes, new instance method.

# Obj.new() -- shorthand for Obj._class.new()
var o = Obj.new()
var cls = o._class
var new_inst = cls.new()

# Object cloning is implemented via cls.new() + implementing Copy interface with 'copy_from' method.

# 'Object' is a universal 'base' class/interface, it has only _class property available.
# upcasting is possible only to nullable references.

var o: Object = Obj.new()
# ok, null if fails to upcast
var obj = cast<Obj?>(o)
# error!
var obj = cast<Obj>(o)
# error! cannot access nullable references
obj._class.new()
# ok
retain(obj)
    obj._class.new()
end_retain
retain(obj)
    obj._class.new()
on_null
    println("cannot upcast")
end_retain

# interfaces
type Object = interface
    # read-only property
    property _class: Class, get
end_interface

type Copy = interface<O>
    proc copy_from(dest: O, src: O)
end_interface


# Any is a value type which can contain anything: array, interface, integer, string...
type DynArray = interface<A:Any>
    proc get_at(i:int):A
    proc set_at(item:A, i:int)
end_interface

# Delegation (emulates inheritance).
# Will not compile if two objects have the same methods implemented,
# you need to define a proc with 'override' and manually call the implementation
# Delegated objects cannot be nullable.
type Obj = object(Copy, Hash, Equals)
    var copy: CopyObject implements Copy
    var hash: HashObject implements Hash
    # error:
    var nullable: SomeObject? implements Equals
end_object

# implement method of one of the interfaces, ignores implementation specified via 'implements'
proc some_interface_method(o: Obj), override
end

# TODO attributes, retrospection